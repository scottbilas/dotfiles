# This is a pre-setup script for a new user environment that works for both bash
# and powershell. See README.md for installation.
#
# kudos:
#
#   @chrisfcarroll for ps1+sh trick: https://gist.github.com/chrisfcarroll/636458b42793cd453a68b529ff53b469)
#   Jimit Dholakia on vanity git.io: https://towardsdatascience.com/github-url-shortener-f1e0aeaf83b6

echo @'
' > /dev/null

#  _               _
# | |             | |
# | |__   __ _ ___| |__
# | '_ \ / _` / __| '_ \
# | |_) | (_| \__ \ | | |
# |_.__/ \__,_|___/_| |_|

set -Eeuo pipefail

if [[ ! $(type -p git) ]]; then
    sudo apt install git
fi

if [[ ! -e ~/dotfiles ]]; then
    git clone --recursive https://github.com/scottbilas/dotfiles ~/dotfiles
fi

# TODO: https://github.com/TsekNet/dotfiles/blob/main/install.sh

# -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-
echo > /dev/null <<"out-null" ###
'@ | out-null

#                                   _          _ _
#                                  | |        | | |
#  _ __   _____      _____ _ __ ___| |__   ___| | |
# | '_ \ / _ \ \ /\ / / _ \ '__/ __| '_ \ / _ \ | |
# | |_) | (_) \ V  V /  __/ |  \__ \ | | |  __/ | |
# | .__/ \___/ \_/\_/ \___|_|  |___/_| |_|\___|_|_|
# | |
# |_|

# to test locally: `iex (cat -raw install.ps1sh)`

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

# CHECK POWERSHELL

if ($PSVersionTable.PSVersion.Major -lt 7) {
    throw "`nPowershell is way out of date! (latest=$currentVersion; yours=$($PSVersionTable.PSVersion)`nGo get a new one at https://aka.ms/powershell-release?tag=stable or from the Windows Store (https://www.microsoft.com/en-us/p/powershell/9mz1snwt0n5d)"
}

# CHECK EXECUTION POLICY

if ((Get-ExecutionPolicy) -gt 'RemoteSigned') {
    Write-Output 'Fixing PowerShell execution policy...'
    Set-ExecutionPolicy RemoteSigned Process -Force
}
else {
    Write-Output 'PowerShell execution policy ok'
}

# FUNCTIONS

function Invoke-Exe($command) {
    Invoke-Expression "& $command"
    if ($LASTEXITCODE) { throw "'$command' returned error $LASTEXITCODE" }
}

function Install-ScoopPackage($Command, $Package, $BucketAlias, $BucketUrl) {
    if (!$Package) {
        $Package = $Command
    }

    if (!(Get-Command $Command -ErrorAction SilentlyContinue)) {
        if ($BucketAlias) {
            $buckets = Invoke-Exe 'scoop bucket list'
            if ($buckets -notcontains $BucketAlias) {
                Write-Output "Adding bucket $BucketAlias..."
                Invoke-Exe "scoop bucket add $BucketAlias $BucketUrl"
            }
        }
        Write-Output "Installing $Package..."
        Invoke-Exe "scoop install $Package"
    } else {
        Write-Output "$Package ok"
    }
}

# INSTALL SCOOP

if (!(Get-Command scoop -ErrorAction SilentlyContinue)) {
    Write-Output 'Installing scoop...'
    # this new script may eventually migrate to get.scoop.sh
    Invoke-WebRequest -UseBasicParsing https://raw.githubusercontent.com/scoopinstaller/install/master/install.ps1 | Invoke-Expression
} else {
    Write-Output 'Scoop ok'
}

# INSTALL CORE APPS

#Install-ScoopPackage git

# CHEZMOI

Install-ScoopPackage chezmoi -BucketAlias twpayne -BucketUrl https://github.com/twpayne/scoop-bucket

Invoke-Exe 'chezmoi init scottbilas/chezmoi'

# SETUP

# TODO: call setup.ps1

# -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-  -==-
out-null
